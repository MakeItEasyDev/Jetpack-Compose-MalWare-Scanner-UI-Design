package com.jetpack.malwarescanner

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Search
import androidx.compose.material.icons.outlined.Notifications
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.jetpack.malwarescanner.ui.theme.*

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MalwareScannerTheme {
                Surface(color = BgColor, modifier = Modifier.fillMaxSize()) {
                    Column {
                        ActionBar()
                        ScanNowCard()
                        SearchItem()
                        OverViewGrid()
                        RelatedConcernLazyRowItem()
                    }
                }
            }
        }
    }
}

@Composable
fun ActionBar() {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .wrapContentHeight(Alignment.Top)
            .padding(horizontal = 10.dp, vertical = 10.dp),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        IconButton(onClick = { /*TODO*/ }) {
            Icon(
                painter = painterResource(id = R.drawable.ic_menu),
                contentDescription = "Menu",
                tint = Color.Black
            )
        }
        Text(
            text = "Protector",
            color = Color.Black,
            fontFamily = FontFamily(Font(R.font.poppins_black)),
            fontSize = 20.sp,
            fontWeight = FontWeight.Bold
        )
        IconButton(onClick = { /*TODO*/ }) {
            Icon(
                imageVector = Icons.Outlined.Notifications,
                contentDescription = "Notification",
                tint = Color.Black
            )
        }
    }
}

@Composable
fun ScanNowCard() {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .height(160.dp)
            .padding(horizontal = 18.dp, vertical = 10.dp),
        backgroundColor = CardBg,
        elevation = 0.dp,
        shape = RoundedCornerShape(15.dp)
    ) {
        Row(
            verticalAlignment = Alignment.CenterVertically
        ) {
            Image(
                painter = painterResource(id = R.drawable.ic_sheild2),
                contentDescription = "Shield",
                modifier = Modifier.padding(20.dp),
                alignment = Alignment.CenterStart
            )
            Column(
                modifier = Modifier
                    .fillMaxHeight()
                    .padding(top = 20.dp)
            ) {
                Text(
                    text = "Summary Status",
                    color = Color.Black,
                    fontSize = 14.sp,
                    fontFamily = FontFamily(Font(R.font.poppins_medium))
                )
                Text(
                    text = "Scanning Needed!",
                    color = Color.Black,
                    fontSize = 16.sp,
                    fontFamily = FontFamily(Font(R.font.poppins_medium))
                )
                Spacer(modifier = Modifier.height(10.dp))
                Button(
                    onClick = { /*TODO*/ },
                    modifier = Modifier.clip(RoundedCornerShape(15.dp)),
                    colors = ButtonDefaults.buttonColors(
                        backgroundColor = Primary,
                        contentColor = Color.White
                    )
                ) {
                    Text(
                        text = "Scan Now",
                        fontFamily = FontFamily(Font(R.font.poppins_medium))
                    )
                }
            }
        }
    }
}

@Composable
fun SearchItem() {
    var text by remember { mutableStateOf("") }

    TextField(
        value = text,
        onValueChange = { text = it },
        label = null,
        placeholder = {
            Text(
                text = "Search Something...",
                color = Color.Black,
                fontFamily = FontFamily(Font(R.font.poppins_medium))
            )
        },
        colors = TextFieldDefaults.textFieldColors(
            backgroundColor = Color.White,
            focusedIndicatorColor = Color.Transparent,
            unfocusedIndicatorColor = Color.Transparent
        ),
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 18.dp)
            .clip(RoundedCornerShape(25.dp)),
        trailingIcon = {
            Icon(
                Icons.Filled.Search,
                contentDescription = "Search",
                tint = Color.Black,
                modifier = Modifier.size(30.dp)
            )
        }
    )
}

@Composable
fun OverViewGrid() {
    Row(
        modifier = Modifier
            .padding(horizontal = 26.dp, vertical = 10.dp)
            .fillMaxWidth(),
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Text(
            text = "Overview",
            color = Color.Black,
            fontFamily = FontFamily(Font(R.font.poppins_black)),
            fontSize = 18.sp,
            fontWeight = FontWeight.Bold
        )
        Icon(
            painter = painterResource(id = R.drawable.ic_more),
            contentDescription = "More Option",
            tint = TextColor,
            modifier = Modifier.padding(end = 6.dp)
        )
    }
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 14.dp),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        OverViewItem(
            icon = R.drawable.ic_shield_cross,
            mainText = "Threat Activity",
            subText = "Total Count",
            data = "600",
            arrow = R.drawable.arrow_top_right,
            statsColor = PrimaryGreen,
            stats = "+1.0%"
        )
        OverViewItem(
            icon = R.drawable.ic_security_user,
            mainText = "User",
            subText = "Distinct Count",
            data = "500",
            arrow = R.drawable.arrow_top_right,
            statsColor = PrimaryGreen,
            stats = "+1.1%"
        )
    }
    Spacer(modifier = Modifier.height(10.dp))
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 14.dp)
            .padding(top = 16.dp),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        OverViewItem(
            icon = R.drawable.ic_cloud,
            mainText = "Cloud Activity",
            subText = "Email Count",
            data = "1.2K",
            arrow = R.drawable.ic_arrow_bottom_right,
            statsColor = StatsBlue,
            stats = "0.5%"
        )
        OverViewItem(
            icon = R.drawable.ic_radar,
            mainText = "Infected",
            subText = "System Count",
            data = "123",
            arrow = R.drawable.ic_arrow_bottom_right,
            statsColor = StatsRed,
            stats = "-1.5%%"
        )
    }
}

@Composable
fun OverViewItem(
    modifier: Modifier = Modifier,
    icon: Int,
    mainText: String,
    subText: String,
    data: String,
    arrow: Int,
    stats: String,
    statsColor: Color
) {
    Card(
        modifier = modifier
            .padding(horizontal = 4.dp)
            .width(165.dp)
            .clip(Shapes.medium),
        elevation = 0.dp
    ) {
        Column(
            modifier = Modifier.padding(12.dp)
        ) {
            Row {
                Icon(
                   painter = painterResource(id = icon),
                   contentDescription = "Item Icon",
                   tint = Primary,
                   modifier = Modifier
                       .clip(CircleShape)
                       .background(IconBackground)
                       .size(36.dp)
                       .padding(5.dp)
                )
                Column(
                    modifier = Modifier.padding(start = 10.dp)
                ) {
                    Text(
                        text = mainText,
                        color = Color.DarkGray,
                        fontFamily = FontFamily(Font(R.font.poppins_bold)),
                        fontSize = 12.sp,
                        fontWeight = FontWeight.Bold
                    )
                    Text(
                        text = subText,
                        color = Color.Gray,
                        fontFamily = FontFamily(Font(R.font.poppins_medium)),
                        fontSize = 10.sp,
                        fontWeight = FontWeight.Medium
                    )
                }
            }
            Spacer(modifier = Modifier.height(8.dp))
            Row(
                modifier = Modifier.width(130.dp),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Text(
                    text = data,
                    color = Color.Black.copy(alpha = 0.8f),
                    fontFamily = FontFamily(Font(R.font.poppins_medium)),
                    fontSize = 34.sp,
                    fontWeight = FontWeight.Bold
                )
                Column {
                    Icon(
                        painter = painterResource(id = arrow),
                        contentDescription = "Arrow",
                        tint = statsColor,
                        modifier = Modifier
                            .size(20.dp)
                    )
                    Text(
                        text = stats,
                        color = statsColor,
                        fontFamily = FontFamily(Font(R.font.poppins_light)),
                        fontSize = 12.sp,
                        fontWeight = FontWeight.Bold,
                        letterSpacing = 1.sp
                    )
                }
            }
        }
    }
}

@Composable
fun RelatedConcernLazyRowItem() {
    Spacer(modifier = Modifier.height(10.dp))
    Row(
        modifier = Modifier
            .padding(horizontal = 26.dp, vertical = 16.dp)
            .fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            text = "Related Concern",
            color = Color.Black,
            fontFamily = FontFamily(Font(R.font.poppins_black)),
            fontSize = 18.sp,
            fontWeight = FontWeight.Bold
        )
        Icon(
            painter = painterResource(id = R.drawable.ic_more),
            contentDescription = "More",
            tint = TextColor,
            modifier = Modifier.padding(end = 6.dp)
        )
    }
    LazyRow(
        modifier = Modifier.padding(start = 18.dp)
    ) {
        item {
            ConcernItemUI("Virus Spike")
            ConcernItemUI("MalWare")
            ConcernItemUI("Trojan")
            ConcernItemUI("Spam Data")
        }
    }
}

@Composable
fun ConcernItemUI(
    text: String
) {
    OutlinedButton(
        onClick = { /*TODO*/ },
        elevation = ButtonDefaults.elevation(defaultElevation = 0.dp),
        colors = ButtonDefaults.outlinedButtonColors(
            contentColor = Primary
        ),
        shape = Shapes.large,
        border = BorderStroke(1.dp, Primary.copy(alpha = 0.5f)),
        modifier = Modifier.padding(end = 6.dp)
    ) {
        Text(
            text = text,
            color = Color.Black,
            fontFamily = FontFamily(Font(R.font.poppins_bold))
        )
    }
}
















